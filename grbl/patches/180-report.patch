--- ./grbl/report.c	2017-01-31 17:46:20.000000000 -0800
+++ ./grbl/report.c	2017-07-10 20:58:00.137373816 -0700
@@ -28,6 +28,7 @@
 
 #include "grbl.h"
 
+#define PSTR(x) (x)
 
 // Internal report utilities to reduce flash with repetitive tasks turned into functions.
 void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
@@ -96,6 +97,11 @@
   print_uint8_base10(val); 
   report_util_line_feed(); // report_util_setting_string(n); 
 }
+static void report_util_uint16_setting(uint8_t n, int val) { 
+  report_util_setting_prefix(n); 
+  print_uint16_base10(val); 
+  report_util_line_feed(); // report_util_setting_string(n); 
+}
 static void report_util_float_setting(uint8_t n, float val, uint8_t n_decimal) { 
   report_util_setting_prefix(n); 
   printFloat(val,n_decimal);
@@ -184,8 +190,8 @@
   // Print Grbl settings.
   report_util_uint8_setting(0,settings.pulse_microseconds);
   report_util_uint8_setting(1,settings.stepper_idle_lock_time);
-  report_util_uint8_setting(2,settings.step_invert_mask);
-  report_util_uint8_setting(3,settings.dir_invert_mask);
+  report_util_uint16_setting(2,settings.step_invert_mask);
+  report_util_uint16_setting(3,settings.dir_invert_mask);
   report_util_uint8_setting(4,bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE));
   report_util_uint8_setting(5,bit_istrue(settings.flags,BITFLAG_INVERT_LIMIT_PINS));
   report_util_uint8_setting(6,bit_istrue(settings.flags,BITFLAG_INVERT_PROBE_PIN));
@@ -196,7 +202,7 @@
   report_util_uint8_setting(20,bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE));
   report_util_uint8_setting(21,bit_istrue(settings.flags,BITFLAG_HARD_LIMIT_ENABLE));
   report_util_uint8_setting(22,bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE));
-  report_util_uint8_setting(23,settings.homing_dir_mask);
+  report_util_uint16_setting(23,settings.homing_dir_mask);
   report_util_float_setting(24,settings.homing_feed_rate,N_DECIMAL_SETTINGVALUE);
   report_util_float_setting(25,settings.homing_seek_rate,N_DECIMAL_SETTINGVALUE);
   report_util_uint8_setting(26,settings.homing_debounce_delay);
@@ -438,7 +444,7 @@
   serial_write(',');
   print_uint8_base10(BLOCK_BUFFER_SIZE-1);
   serial_write(',');
-  print_uint8_base10(RX_BUFFER_SIZE);
+  print_uint16_base10(serial_get_rx_buffer_size());
 
   report_util_feedback_line_feed();
 }
