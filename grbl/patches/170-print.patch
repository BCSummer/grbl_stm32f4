--- grbl-master/print.c	2015-07-17 07:19:57.000000000 -0700
+++ grbl-master/print.c	2015-08-02 09:22:16.383109473 -0700
@@ -21,109 +21,81 @@
 
 #include "grbl.h"
 
-
 void printString(const char *s)
 {
   while (*s)
     serial_write(*s++);
 }
 
-
 // Print a string stored in PGM-memory
 void printPgmString(const char *s)
 {
-  char c;
-  while ((c = pgm_read_byte_near(s++)))
-    serial_write(c);
+  while (*s)
+    serial_write(*s++);
 }
 
+void print_base2(uint32_t n, int bits)
+{
+  uint32_t mask = 1 << (bits - 1);
+  int i;
 
-// void printIntegerInBase(unsigned long n, unsigned long base)
-// { 
-// 	unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
-// 	unsigned long i = 0;
-// 
-// 	if (n == 0) {
-// 		serial_write('0');
-// 		return;
-// 	} 
-// 
-// 	while (n > 0) {
-// 		buf[i++] = n % base;
-// 		n /= base;
-// 	}
-// 
-// 	for (; i > 0; i--)
-// 		serial_write(buf[i - 1] < 10 ?
-// 			'0' + buf[i - 1] :
-// 			'A' + buf[i - 1] - 10);
-// }
-
-
-// Prints an uint8 variable with base and number of desired digits.
-void print_unsigned_int8(uint8_t n, uint8_t base, uint8_t digits)
-{ 
-  unsigned char buf[digits];
-  uint8_t i = 0;
-
-  for (; i < digits; i++) {
-      buf[i] = n % base ;
-      n /= base;
+  for (i = 0; i < bits; i ++) {
+    serial_write((n & mask) ? '1' : '0');
+    mask >>= 1;
   }
-
-  for (; i > 0; i--)
-      serial_write('0' + buf[i - 1]);
 }
 
-
 // Prints an uint8 variable in base 2.
 void print_uint8_base2(uint8_t n) {
-  print_unsigned_int8(n,2,8);
+  print_base2(n, 8);
 }
 
+// Prints an uint16 variable in base 2.
+void print_uint16_base2(uint16_t n) {
+  print_base2(n, 16);
+}
+
+static void print_base10(uint32_t n)
+{
+  char buf[16];
+  int i = 0;
+
+  do {
+    buf[i++] = n % 10;
+    n /= 10;
+  } while (n > 0);
+
+  for (; i > 0; i--) {
+    serial_write('0' + buf[i-1]);
+  }
+}
 
 // Prints an uint8 variable in base 10.
 void print_uint8_base10(uint8_t n)
 {   
-  uint8_t digits;
-  if (n < 10) { digits = 1; } 
-  else if (n < 100) { digits = 2; }
-  else { digits = 3; }
-  print_unsigned_int8(n,10,digits);
+  print_base10(n);
 }
 
+void print_uint16_base10(uint16_t n)
+{   
+  print_base10(n);
+}
 
 void print_uint32_base10(uint32_t n)
 { 
-  if (n == 0) {
-    serial_write('0');
-    return;
-  } 
-
-  unsigned char buf[10]; 
-  uint8_t i = 0;  
-  
-  while (n > 0) {
-    buf[i++] = n % 10;
-    n /= 10;
-  }
-    
-  for (; i > 0; i--)
-    serial_write('0' + buf[i-1]);
+  print_base10(n);
 }
 
-
 void printInteger(long n)
 {
+  uint32_t x = n;
   if (n < 0) {
     serial_write('-');
-    print_uint32_base10(-n);
-  } else {
-    print_uint32_base10(n);
+    x = -n;
   }
+  print_base10(x);
 }
 
-
 // Convert float to string by immediately converting to a long integer, which contains
 // more digits than a float. Number of decimal places, which are tracked by a counter,
 // may be set by the user. The integer is then efficiently converted to a string.
--- grbl-master/print.h	2015-07-17 07:19:57.000000000 -0700
+++ grbl-master/print.h	2015-08-02 09:24:31.245587741 -0700
@@ -22,24 +22,20 @@
 #ifndef print_h
 #define print_h
 
-
 void printString(const char *s);
-
 void printPgmString(const char *s);
 
-void printInteger(long n);
-
-void print_uint32_base10(uint32_t n);
-
-// Prints uint8 variable with base and number of desired digits.
-void print_unsigned_int8(uint8_t n, uint8_t base, uint8_t digits); 
-
-// Prints an uint8 variable in base 2.
+// Prints an uint8/16 variable in base 2.
+void print_base2(uint32_t n, int bits);
 void print_uint8_base2(uint8_t n);
+void print_uint16_base2(uint16_t n);
 
-// Prints an uint8 variable in base 10.
+// Prints an uint8/16 variable in base 10.
 void print_uint8_base10(uint8_t n);
+void print_uint16_base10(uint16_t n);
+void print_uint32_base10(uint32_t n);
 
+void printInteger(long n);
 void printFloat(float n, uint8_t decimal_places);
 
 // Floating value printing handlers for special variables types used in Grbl. 
@@ -55,4 +51,4 @@
 // Debug tool to print free memory in bytes at the called point. Not used otherwise.
 void printFreeMemory();
 
-#endif
\ No newline at end of file
+#endif
